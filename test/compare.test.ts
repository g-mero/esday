import { describe, expect, it } from 'vitest'
import { esday } from '~/core'

describe('isSame', () => {
  it('without units', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    const dateCopy = esday(date)

    expect(date.isSame(esday(new Date(2012, 3, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2010, 3, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(true)
    expect(date.isSame(esday(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(false)
    expect(date.isSame(date)).toBe(true)
    expect(+date).toEqual(+dateCopy)
  })

  it('with unit year', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isSame(esday(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false)
    expect(date.isSame(esday(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false)
    expect(date.isSame(date, 'year')).toBe(true)
  })

  it('with unit month', () => {
    const date = esday(new Date(2011, 2, 3, 4, 5, 6, 7))
    expect(date.isSame(esday(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(false)
    expect(date.isSame(date, 'month')).toBe(true)
  })

  it('with unit day', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isSame(esday(new Date(2011, 1, 2, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 1, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 3, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 0, 0, 0, 0)), 'day')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 23, 59, 59, 999)), 'day')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 3, 0, 0, 0, 0)), 'day')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 1, 23, 59, 59, 999)), 'day')).toBe(false)
    expect(date.isSame(date, 'day')).toBe(true)
  })

  it('with unit hour', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 3, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 4, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 0, 0, 0)), 'hour')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 59, 59, 999)), 'hour')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 4, 0, 0, 0)), 'hour')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 2, 59, 59, 999)), 'hour')).toBe(false)
    expect(date.isSame(date, 'hour')).toBe(true)
  })

  it('with unit minute', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 1, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 3, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 4, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 5, 9, 10)), 'minute')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 0, 0)), 'minute')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 59, 999)), 'minute')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 5, 0, 0)), 'minute')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 3, 59, 999)), 'minute')).toBe(false)
    expect(date.isSame(date, 'minute')).toBe(true)
  })

  it('with unit second', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 1, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 3, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 4, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 5, 5, 10)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 6, 10)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 5, 0)), 'second')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 5, 999)), 'second')).toBe(true)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 6, 0)), 'second')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 1, 2, 3, 4, 4, 999)), 'second')).toBe(false)
    expect(date.isSame(date, 'second')).toBe(true)
  })

  it('with unit millisecond', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isSame(esday(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(false)
    expect(date.isSame(esday(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(false)
    expect(date.isSame(date, 'millisecond')).toBe(true)
  })

  it('with invalid input', () => {
    expect(esday(null).isSame(esday('2018-01-01'))).toBe(false)
    expect(esday('2018-01-01').isSame(esday(null))).toBe(false)
  })
})

describe('isAfter', () => {
  it('without units', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    const dateCopy = esday(date)
    expect(date.isAfter(esday(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(true)
    expect(date.isAfter(date)).toBe(false)
    expect(+date).toEqual(+dateCopy)
  })

  it('with unit year', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isAfter(esday(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false)
    expect(date.isAfter(esday(new Date(2013, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true)
    expect(date.isAfter(esday(new Date(1980, 11, 31, 23, 59, 59, 999)), 'year')).toBe(true)
    expect(date.isAfter(date, 'year')).toBe(false)
  })

  it('with unit month', () => {
    const date = esday(new Date(2011, 2, 3, 4, 5, 6, 7))
    expect(date.isAfter(esday(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(true)
    expect(date.isAfter(esday(new Date(2010, 12, 31, 23, 59, 59, 999)), 'month')).toBe(true)
    expect(date.isAfter(date, 'month')).toBe(false)
  })

  it('with unit day', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 6))
    expect(date.isAfter(esday(new Date(2011, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 3, 2, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 4, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 0, 0, 0, 0)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 23, 59, 59, 999)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 0, 0, 0, 0)), 'day')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 23, 59, 59, 999)), 'day')).toBe(true)
    expect(date.isAfter(esday(new Date(2010, 3, 10, 0, 0, 0, 0)), 'day')).toBe(true)
    expect(date.isAfter(date, 'day')).toBe(false)
  })

  it('with unit hour', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 6))
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 4, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 4, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 0, 0, 0)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 59, 59, 999)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 4, 0, 0, 0)), 'hour')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 2, 59, 59, 999)), 'hour')).toBe(true)
    expect(date.isAfter(date, 'hour')).toBe(false)
  })

  it('with unit minute', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 6))
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 4, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 4, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 2, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 5, 9, 10)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 3, 9, 10)), 'minute')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 0, 0)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 59, 999)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 5, 0, 0)), 'minute')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 3, 59, 999)), 'minute')).toBe(true)
    expect(date.isAfter(date, 'minute')).toBe(false)
  })

  it('with unit second', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 3, 2, 3, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 4, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 1, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 4, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 4, 1, 5, 10)), 'second')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 5, 5, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 3, 5, 10)), 'second')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 6, 10)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 4, 5)), 'second')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 0)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 999)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 6, 0)), 'second')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 4, 999)), 'second')).toBe(true)
    expect(date.isAfter(date, 'second')).toBe(false)
  })

  it('with unit millisecond', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(true)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(false)
    expect(date.isAfter(esday(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(true)
    expect(date.isAfter(date, 'millisecond')).toBe(false)
  })

  it('with invalid input', () => {
    const date = esday()
    const invalid = esday(null)
    expect(date.isAfter(invalid)).toBe(false)
    expect(invalid.isAfter(date)).toBe(false)
    expect(date.isAfter(invalid, 'year')).toBe(false)
    expect(date.isAfter(invalid, 'month')).toBe(false)
    expect(date.isAfter(invalid, 'day')).toBe(false)
    expect(date.isAfter(invalid, 'hour')).toBe(false)
    expect(date.isAfter(invalid, 'minute')).toBe(false)
    expect(date.isAfter(invalid, 'second')).toBe(false)
  })
})

describe('isBefore', () => {
  it('without units', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    expect(date.isBefore(esday(new Date(2012, 3, 2, 3, 5, 5, 10)))).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 3, 2, 3, 3, 5, 10)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 4, 2, 3, 4, 5, 10)))).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 2, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 3, 4, 5, 10)))).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 3, 4, 5, 10)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 4, 4, 5, 10)))).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 2, 4, 5, 10)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 5, 5, 10)))).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 3, 5, 10)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 6, 10)))).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 4, 11)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 10)))).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 11)))).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 9)))).toBe(false)
    expect(date.isBefore(date)).toBe(false)
  })

  it('with unit year', () => {
    const date = esday(new Date(2011, 1, 2, 3, 4, 5, 6))
    expect(date.isBefore(esday(new Date(2011, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false)
    expect(date.isBefore(esday(new Date(2013, 5, 6, 7, 8, 9, 10)), 'year')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 5, 6, 7, 8, 9, 10)), 'year')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 0, 1, 0, 0, 0, 0)), 'year')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 0, 1, 0, 0, 0, 0)), 'year')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false)
    expect(date.isBefore(esday(new Date(1980, 11, 31, 23, 59, 59, 999)), 'year')).toBe(false)
    expect(date.isBefore(date, 'year')).toBe(false)
  })

  it('with unit month', () => {
    const date = esday(new Date(2011, 2, 3, 4, 5, 6, 7))
    expect(date.isBefore(esday(new Date(2011, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 2, 6, 7, 8, 9, 10)), 'month')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 2, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 5, 6, 7, 8, 9, 10)), 'month')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 1, 6, 7, 8, 9, 10)), 'month')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 2, 1, 0, 0, 0, 0)), 'month')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 2, 31, 23, 59, 59, 999)), 'month')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 0, 0, 0, 0)), 'month')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 1, 27, 23, 59, 59, 999)), 'month')).toBe(false)
    expect(date.isBefore(esday(new Date(2010, 12, 31, 23, 59, 59, 999)), 'month')).toBe(false)
    expect(date.isBefore(date, 'month')).toBe(false)
  })

  it('with unit day', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 6))
    expect(date.isBefore(esday(new Date(2011, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 3, 2, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 3, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 4, 2, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 2, 2, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 7, 8, 9, 10)), 'day')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 7, 8, 9, 10)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 0, 0, 0, 0)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 23, 59, 59, 999)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 0, 0, 0, 0)), 'day')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 23, 59, 59, 999)), 'day')).toBe(false)
    expect(date.isBefore(esday(new Date(2010, 3, 10, 0, 0, 0, 0)), 'day')).toBe(false)
    expect(date.isBefore(date, 'day')).toBe(false)
  })

  it('with unit hour', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 6))
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 4, 2, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 1, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 3, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 4, 8, 9, 10)), 'hour')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 8, 9, 10)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 0, 0, 0)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 59, 59, 999)), 'hour')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 4, 0, 0, 0)), 'hour')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 2, 59, 59, 999)), 'hour')).toBe(false)
    expect(date.isBefore(date, 'hour')).toBe(false)
  })

  it('with unit minute', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 6))
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 3, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 4, 2, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 2, 2, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 3, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 3, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 4, 4, 9, 10)), 'minute')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 2, 4, 9, 10)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 5, 9, 10)), 'minute')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 3, 9, 10)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 0, 0)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 59, 999)), 'minute')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 5, 0, 0)), 'minute')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 3, 59, 999)), 'minute')).toBe(false)
    expect(date.isBefore(date, 'minute')).toBe(false)
  })

  it('with unit second', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 3, 2, 3, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 3, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 4, 2, 3, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 2, 2, 3, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 3, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 1, 4, 5, 10)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 4, 4, 5, 10)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 4, 1, 5, 10)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 5, 5, 10)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 3, 5, 10)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 6, 10)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 4, 5)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 0)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 999)), 'second')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 6, 0)), 'second')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 4, 999)), 'second')).toBe(false)
    expect(date.isBefore(date, 'second')).toBe(false)
  })

  it('with unit millisecond', () => {
    const date = esday(new Date(2011, 3, 2, 3, 4, 5, 10))
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2012, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2010, 3, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 4, 2, 3, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 2, 2, 3, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 3, 3, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 1, 4, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 4, 4, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 1, 4, 1, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 5, 5, 10)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 3, 5, 10)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 6, 10)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 4, 5)), 'millisecond')).toBe(false)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 6, 11)), 'millisecond')).toBe(true)
    expect(date.isBefore(esday(new Date(2011, 3, 2, 3, 4, 4, 9)), 'millisecond')).toBe(false)
    expect(date.isBefore(date, 'millisecond')).toBe(false)
  })

  it('with invalid input', () => {
    const date = esday()
    const invalid = esday(null)
    expect(date.isBefore(invalid)).toBe(false)
    expect(invalid.isBefore(date)).toBe(false)
    expect(date.isBefore(invalid, 'year')).toBe(false)
    expect(date.isBefore(invalid, 'month')).toBe(false)
    expect(date.isBefore(invalid, 'day')).toBe(false)
    expect(date.isBefore(invalid, 'hour')).toBe(false)
    expect(date.isBefore(invalid, 'minute')).toBe(false)
    expect(date.isBefore(invalid, 'second')).toBe(false)
  })
})
